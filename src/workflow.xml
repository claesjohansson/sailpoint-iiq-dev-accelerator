<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="IIQDevAcceleratorWF">
  <Variable name="transient" initializer="true"/>
  <Variable name="payload" type="java.lang.Object" output="true"/>
  <Step icon="Start" name="Start">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Workflow IIQDevAcceleratorWF started for operation: " + operation); 
      </Source>
    </Script>
    <Transition to="Get Version" when='"getVersion".equals(operation);'/>
    <Transition to="Import" when='"Import".equals(operation);'/>
    <Transition to="Get Classes" when='"getClasses".equals(operation);'/>
    <Transition to="Get Class Objects" when='"getClassObjects".equals(operation);'/>
    <Transition to="Get Object" when='"getObject".equals(operation);'/>
    <Transition to="Delete Object" when='"deleteObject".equals(operation);'/>
    <Transition to="Get Task List" when='"getTaskList".equals(operation);'/>
    <Transition to="Run Task" when='"runTask".equals(operation);'/>
    <Transition to="Get Rules" when='"getRules".equals(operation);'/>
    <Transition to="Run Rule" when='"runRule".equals(operation);'/>
    <Transition to="Eval BS" when='"evalBS".equals(operation);'/>
    <Transition to="Get Log File" when='"getLog".equals(operation);'/>
    <Transition to="Reload Log File" when='"reloadLog".equals(operation);'/>
    <Transition to="Invalid operation"/>
  </Step>
  <Step icon="Default" name="Get Version" resultVariable="payload">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("GetVersion is called");         
        return "1.0.7";
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Provision" name="Import" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.server.Importer; 
          import sailpoint.tools.GeneralException; 
          import sailpoint.web.system.ImportBean.ImportMonitor; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 

          iidDevAccelLogger.debug("Started Importer"); 
          Importer importer = new Importer(context, new ImportMonitor()); 
          try { 
            iidDevAccelLogger.debug("File content: " + resource); 
            importer.importXml(resource); 
            context.commitTransaction(); 
          } 
          catch (Exception e) {
            iidDevAccelLogger.error("Importer failed with exception: " + e); 
            return e.toString(); 
          } 
          return "success"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Classes" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting classes"); 
          List resultArray = new ArrayList();
          for(Class cls : ClassLists.MajorClasses){
            resultArray.add(cls.getSimpleName());
          }
          iidDevAccelLogger.debug("Finished getting classes"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Class Objects" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting class objects for " + theClass); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.debug("Couldn't find class " + theClass);
            return "fail"; 
          }

          String field = "name";
          if(theClass.equals("Identity")){
            field = "displayName";
          }
          List resultArray = new ArrayList();
          Iterator it = context.search(myClass, null, field);
          while(it.hasNext()){
            Object[] obj = it.next();
            resultArray.add(obj[0]);
          }
          
          iidDevAccelLogger.debug("Finished getting class objects"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Object" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting object for " + theClass + " and " + objName); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.error("Couldn't find class " + theClass);
            return "fail"; 
          }

          String field = "name";
          if(theClass.equals("Identity")){
            field = "displayName";
          }

          SailPointObject obj = context.getUniqueObject(myClass, Filter.eq(field, objName));
          if(null == obj){
            iidDevAccelLogger.error("Couldn't find the object");
            return "fail"; 
          }
          
          iidDevAccelLogger.debug("Finished getting an object"); 
          return obj.toXml(); 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Delete Object" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import sailpoint.api.*;
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started deleting object for " + theClass + " and " + objName); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.error("Couldn't find class " + theClass);
            return "fail"; 
          }

          String field = "name";
          if(theClass.equals("Identity")){
            field = "displayName";
          }

          SailPointObject obj = context.getUniqueObject(myClass, Filter.eq(field, objName));
          if(null == obj){
            iidDevAccelLogger.error("Couldn't find the object");
            return "fail"; 
          }
          Terminator terminator = new Terminator(context);
          terminator.setTrace(true);
          terminator.deleteObject(obj);

          iidDevAccelLogger.debug("Finished deleting object"); 
          return "success"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Task List" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started Get Task List"); 

          List taskDefinitions = context.getObjects(TaskDefinition.class); 
          List resultArray = new ArrayList(); 
          for (TaskDefinition taskDefinition: taskDefinitions) { 
            if(!taskDefinition.isHidden() && !taskDefinition.isTemplate() ){ 
              resultArray.add(taskDefinition.getName()); 
            } 
          } 
          iidDevAccelLogger.debug("Exiting Get Task List with  " + resultArray.size() + " tasks"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Run Task" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import sailpoint.api.TaskManager; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started Run Task: " + taskName); 

          TaskManager tm = new TaskManager(context); 
          TaskDefinition taskDefinition = context.getObjectByName(TaskDefinition.class, taskName); 
          if(null == taskDefinition) { 
            iidDevAccelLogger.debug("Couldn't fine task: " + taskName); 
            return "fail"; 
          } 
          TaskSchedule ts = tm.run(taskDefinition, inputArgs); 
          TaskResult tr = null; 
          iidDevAccelLogger.debug("Start monitoring for task results..."); 
          while (null == tr) { 
            tr = ts.getLatestResult(); 
            Thread.sleep(50);
          } 
          iidDevAccelLogger.debug("Finished monitoring task results, result: " + tr); 
          return "taskId=" + tr.getId(); 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Rules" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          QueryOptions qo = new QueryOptions();
          if(void != ruleName && null != ruleName){
            Filter f = Filter.eq("name", ruleName);
            qo.addFilter(f);
          }
          List rules=context.getObjects(Rule.class, qo); 
          iidDevAccelLogger.debug("got " + rules.size()); 
          Map objMap = new HashMap();

          for (Rule rule: rules) { 
            List args = new ArrayList(); 
            for (Argument arg: rule.getSignature().getArguments()) { 
              args.add(arg.getName()); 
            } 
            objMap.put(rule.getName(), args);
          } 
          iidDevAccelLogger.debug("returning " + objMap.keySet().size() + " rules"); 
          return objMap; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Run Rule" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Run Rule: " + ruleName); 
          Object result = null;
          try{
            Rule rule = (Rule)context.getObjectByName(Rule.class, ruleName);
            result = context.runRule(rule, inputArgs);
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception: " + e.toString()); 
            result = e.toString();
          }
          iidDevAccelLogger.debug("Exiting rule with result: " + result); 
          return null != result ? result:"null"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Eval BS" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import bsh.Interpreter;
          import org.apache.log4j.Logger;
          String injectContext = "import sailpoint.api.*;\nSailPointContext context = SailPointFactory.createPrivateContext();\n";

          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Evaluating beanshell script" + script); 
          File scriptFile = File.createTempFile("beanshell", null);
          //iidDevAccelLogger.debug("temp path: " + scriptFile.getAbsolutePath()); 
          BufferedWriter bw = new BufferedWriter(new FileWriter(scriptFile));
          bw.write(injectContext + script);
          bw.close();
          Object result = null;
          try{
            Interpreter interpreter = new Interpreter();
            result = interpreter.source(scriptFile.getAbsolutePath());
          }
          catch(Exception e){
            result = e.toString();
          }
          scriptFile.deleteOnExit();
          if(null == result){
            result = "empty result";
          }
          iidDevAccelLogger.debug("Script evaluated with: " + result); 
          return result; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Log File" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import java.nio.file.*;
          import java.nio.charset.StandardCharsets;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Getting log file...");
          String[] logToSearchArr = {"log4j2.properties", "log4j.properties"};
          String contents = null;
          String logFileName = null;
          for(int i = 0; i < logToSearchArr.length; i++){
            String logToSearch = logToSearchArr[i];
            iidDevAccelLogger.debug("Searing for " + logToSearch + "...");
            logFileName = Util.findFile("user.dir", logToSearch, true);
            if(null != logFileName){
              iidDevAccelLogger.debug("Found: " + logFileName);
              break;
            }
          }
          if(null == logFileName){
            iidDevAccelLogger.debug("Couldn't find a log4j file");
            return contents;
          }
          try{
            contents = new String(Files.readAllBytes(Paths.get(logFileName)));
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception during reading file: " + e.toString());
            return "failed";
          }

          iidDevAccelLogger.debug("Successfully read a log4j file contents"); 
          return contents; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Reload Log File" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Reloading logging config...");
          String[] logToSearchArr = {"log4j2.properties", "log4j.properties"};
          String logFileName = null;
          for(int i = 0; i < logToSearchArr.length; i++){
            String logToSearch = logToSearchArr[i];
            iidDevAccelLogger.debug("Searing for " + logToSearch + "...");
            logFileName = Util.findFile("user.dir", logToSearch, true);
            if(null != logFileName){
              iidDevAccelLogger.debug("Found: " + logFileName);
              break;
            }
          }
          if(null == logFileName){
            iidDevAccelLogger.debug("Couldn't find a log4j file, nothing to refresh");
            return "failed, no existing file";
          }

          try{
            FileWriter myWriter = new FileWriter(logFileName);
            myWriter.write(logContent);
            myWriter.close();
            iidDevAccelLogger.debug("Updated " + logFileName + " with " + logContent.length() + " bytes of content");
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception during writing to file: " + e.toString());
            return "failed";
          }
          File logFile = new File(logFileName);
          LoggerContext loggerContext = (LoggerContext)LogManager.getContext(false);
          loggerContext.setConfigLocation(logFile.toURI());

          iidDevAccelLogger.debug("Finished reloading logging config"); 
          return "succeeded"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Invalid operation" resultVariable="payload">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Not supported operation: " + operation);         
        return operation + " not supported";
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Workflow IIQDevAcceleratorWF stopped for operation: " + operation);
      </Source>
    </Script>
  </Step>
</Workflow>